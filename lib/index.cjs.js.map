{"version":3,"file":"index.cjs.js","sources":["../src/types.ts","../src/context.ts","../src/utils.ts","../src/initLDClient.ts","../src/provider.tsx","../src/asyncWithLDProvider.tsx","../src/useFlags.ts","../src/useLDClient.ts","../src/withLDConsumer.tsx","../src/withLDProvider.tsx"],"sourcesContent":["import { LDClient, LDFlagSet, LDOptions, LDUser } from 'launchdarkly-js-client-sdk';\nimport * as React from 'react';\n\n/**\n * Initialization options for the LaunchDarkly React SDK. These are in addition to the options exposed\n * by [[LDOptions]] which are common to both the JavaScript and React SDKs.\n */\nexport interface LDReactOptions {\n  /**\n   * Whether the React SDK should transform flag keys into camel-cased format.\n   * Using camel-cased flag keys allow for easier use as prop values, however,\n   * these keys won't directly match the flag keys as known to LaunchDarkly.\n   * Consequently, flag key collisions may be possible and the Code References feature\n   * will not function properly.\n   *\n   * This is true by default, meaning that keys will automatically be converted to camel-case.\n   *\n   * For more information, see the React SDK Reference Guide on\n   * [flag keys](https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys).\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n   */\n  useCamelCaseFlagKeys?: boolean;\n}\n\n/**\n * Contains default values for the `reactOptions` object.\n */\nexport const defaultReactOptions = { useCamelCaseFlagKeys: true };\n\n/**\n * Configuration object used to initialise LaunchDarkly's JS client.\n */\nexport interface ProviderConfig {\n  /**\n   * Your project and environment specific client side ID. You can find\n   * this in your LaunchDarkly portal under Account settings. This is\n   * the only mandatory property required to use the React SDK.\n   */\n  clientSideID: string;\n\n  /**\n   * A LaunchDarkly user object. If unspecified, a new user with a\n   * random key will be created and used. This user's key will remain constant across browser sessions.\n   *\n   * @see https://docs.launchdarkly.com/sdk/features/user-config#javascript\n   */\n  user?: LDUser;\n\n  /**\n   * If set to true, the ldClient will not be initialized until the user prop has been defined.\n   */\n  deferInitialization?: boolean;\n\n  /**\n   * LaunchDarkly initialization options. These options are common between LaunchDarkly's JavaScript and React SDKs.\n   *\n   * @see https://docs.launchdarkly.com/sdk/features/config#javascript\n   */\n  options?: LDOptions;\n\n  /**\n   * Additional initialization options specific to the React SDK.\n   *\n   * @see options\n   */\n  reactOptions?: LDReactOptions;\n\n  /**\n   * If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n   * Otherwise, all flags will be requested and listened to.\n   */\n  flags?: LDFlagSet;\n}\n\n/**\n * The return type of withLDProvider HOC. Exported for testing purposes only.\n *\n * @ignore\n */\nexport interface EnhancedComponent extends React.Component {\n  subscribeToChanges(ldClient: LDClient): void;\n  // tslint:disable-next-line:invalid-void\n  componentDidMount(): Promise<void>;\n  // tslint:disable-next-line:invalid-void\n  componentDidUpdate(prevProps: ProviderConfig): Promise<void>;\n}\n\n/**\n * Return type of `initLDClient`.\n */\nexport interface AllFlagsLDClient {\n  /**\n   * Contains all flags from LaunchDarkly.\n   */\n  flags: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`).\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient: LDClient;\n}\n","import { createContext } from 'react';\nimport { LDClient, LDFlagSet } from 'launchdarkly-js-client-sdk';\n\n/**\n * The LaunchDarkly context stored in the Provider state and passed to consumers.\n */\ninterface LDContext {\n  /**\n   * Contains all flags from LaunchDarkly. This object will always exist but will be empty {} initially\n   * until flags are fetched from the LaunchDarkly servers.\n   */\n  flags: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`).\n   * This will be be undefined initially until initialization is complete.\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient?: LDClient;\n}\n\n/**\n * @ignore\n */\nconst context = createContext<LDContext>({ flags: {}, ldClient: undefined });\nconst {\n  /**\n   * @ignore\n   */\n  Provider,\n  /**\n   * @ignore\n   */\n  Consumer,\n} = context;\n\nexport { Provider, Consumer, LDContext };\nexport default context;\n","import { LDClient, LDFlagChangeset, LDFlagSet } from 'launchdarkly-js-client-sdk';\nimport camelCase from 'lodash.camelcase';\nimport { defaultReactOptions, LDReactOptions } from './types';\n\n/**\n * Transforms a set of flags so that their keys are camelCased. This function ignores\n * flag keys which start with `$`.\n *\n * @param rawFlags A mapping of flag keys and their values\n * @return A transformed `LDFlagSet` with camelCased flag keys\n */\nexport const camelCaseKeys = (rawFlags: LDFlagSet) => {\n  const flags: LDFlagSet = {};\n  for (const rawFlag in rawFlags) {\n    // Exclude system keys\n    if (rawFlag.indexOf('$') !== 0) {\n      flags[camelCase(rawFlag)] = rawFlags[rawFlag]; // tslint:disable-line:no-unsafe-any\n    }\n  }\n\n  return flags;\n};\n\n/**\n * Gets the flags to pass to the provider from the changeset.\n *\n * @param changes the `LDFlagChangeset` from the ldClient onchange handler.\n * @param targetFlags if targetFlags are specified, changes to other flags are ignored and not returned in the\n * flattened `LDFlagSet`\n * @param reactOptions reactOptions.useCamelCaseFlagKeys determines whether to change the flag keys to camelCase\n * @return an `LDFlagSet` with the current flag values from the LDFlagChangeset filtered by `targetFlags`. The returned\n * object may be empty `{}` if none of the targetFlags were changed.\n */\nexport const getFlattenedFlagsFromChangeset = (\n  changes: LDFlagChangeset,\n  targetFlags: LDFlagSet | undefined,\n  reactOptions: LDReactOptions,\n): LDFlagSet => {\n  const flattened: LDFlagSet = {};\n  for (const key in changes) {\n    if (!targetFlags || targetFlags[key] !== undefined) {\n      // tslint:disable-next-line:no-unsafe-any\n      const flagKey = reactOptions.useCamelCaseFlagKeys ? camelCase(key) : key;\n      flattened[flagKey] = changes[key].current;\n    }\n  }\n\n  return flattened;\n};\n\n/**\n * Retrieves flag values.\n *\n * @param ldClient LaunchDarkly client\n * @param reactOptions Initialization options for the LaunchDarkly React SDK\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n *\n * @returns an `LDFlagSet` with the current flag values from LaunchDarkly filtered by `targetFlags`.\n */\nexport const fetchFlags = (\n  ldClient: LDClient,\n  reactOptions: LDReactOptions = defaultReactOptions,\n  targetFlags?: LDFlagSet,\n) => {\n  let rawFlags: LDFlagSet = {};\n\n  if (targetFlags) {\n    for (const flag in targetFlags) {\n      rawFlags[flag] = ldClient.variation(flag, targetFlags[flag]);\n    }\n  } else {\n    rawFlags = ldClient.allFlags();\n  }\n\n  return reactOptions.useCamelCaseFlagKeys ? camelCaseKeys(rawFlags) : rawFlags;\n};\n\n/**\n * @deprecated The `camelCaseKeys.camelCaseKeys` property will be removed in a future version,\n * please update your code to use the `camelCaseKeys` function directly.\n */\n// tslint:disable-next-line deprecation\ncamelCaseKeys.camelCaseKeys = camelCaseKeys;\n\nexport default { camelCaseKeys, getFlattenedFlagsFromChangeset, fetchFlags };\n","import { initialize as ldClientInitialize, LDFlagSet, LDOptions, LDUser } from 'launchdarkly-js-client-sdk';\nimport { AllFlagsLDClient, defaultReactOptions, LDReactOptions } from './types';\nimport { fetchFlags } from './utils';\nimport { version } from '../package.json';\n\n/**\n * Internal function to initialize the `LDClient`.\n *\n * @param clientSideID Your project and environment specific client side ID\n * @param user A LaunchDarkly user object\n * @param reactOptions Initialization options for the LaunchDarkly React SDK\n * @param options LaunchDarkly initialization options\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n *\n * @see `ProviderConfig` for more details about the parameters\n * @return An initialized client and flags\n */\nconst initLDClient = async (\n  clientSideID: string,\n  user: LDUser = { anonymous: true },\n  reactOptions: LDReactOptions = defaultReactOptions,\n  options?: LDOptions,\n  targetFlags?: LDFlagSet,\n): Promise<AllFlagsLDClient> => {\n  const allOptions = { wrapperName: 'react-client-sdk', wrapperVersion: version, ...options };\n  const ldClient = ldClientInitialize(clientSideID, user, allOptions);\n\n  return new Promise<AllFlagsLDClient>(resolve => {\n    ldClient.on('ready', () => {\n      const flags = fetchFlags(ldClient, reactOptions, targetFlags);\n      resolve({ flags, ldClient });\n    });\n  });\n};\n\nexport default initLDClient;\n","import * as React from 'react';\nimport { LDClient, LDFlagSet, LDFlagChangeset } from 'launchdarkly-js-client-sdk';\nimport { EnhancedComponent, ProviderConfig, defaultReactOptions } from './types';\nimport { Provider, LDContext as HocState } from './context';\nimport initLDClient from './initLDClient';\nimport { camelCaseKeys, getFlattenedFlagsFromChangeset } from './utils';\n\n/**\n * The `LDProvider` is a component which accepts a config object which is used to\n * initialize `launchdarkly-js-client-sdk`.\n *\n * This Provider does three things:\n * - It initializes the ldClient instance by calling `launchdarkly-js-client-sdk` initialize on `componentDidMount`\n * - It saves all flags and the ldClient instance in the context API\n * - It subscribes to flag changes and propagate them through the context API\n *\n * Because the `launchdarkly-js-client-sdk` in only initialized on `componentDidMount`, your flags and the\n * ldClient are only available after your app has mounted. This can result in a flicker due to flag changes at\n * startup time.\n *\n * This component can be used as a standalone provider. However, be mindful to only include the component once\n * within your application. This provider is used inside the `withLDProviderHOC` and can be used instead to initialize\n * the `launchdarkly-js-client-sdk`. For async initialization, check out the `asyncWithLDProvider` function\n */\nclass LDProvider extends React.Component<ProviderConfig, HocState> implements EnhancedComponent {\n  readonly state: Readonly<HocState>;\n\n  constructor(props: ProviderConfig) {\n    super(props);\n\n    const { options } = props;\n\n    this.state = {\n      flags: {},\n      ldClient: undefined,\n    };\n\n    if (options) {\n      const { bootstrap } = options;\n      if (bootstrap && bootstrap !== 'localStorage') {\n        const { useCamelCaseFlagKeys } = this.getReactOptions();\n        const flags = useCamelCaseFlagKeys ? camelCaseKeys(bootstrap) : bootstrap;\n        this.state = {\n          flags,\n          ldClient: undefined,\n        };\n      }\n    }\n  }\n\n  getReactOptions = () => ({ ...defaultReactOptions, ...this.props.reactOptions });\n\n  subscribeToChanges = (ldClient: LDClient) => {\n    const { flags: targetFlags } = this.props;\n    ldClient.on('change', (changes: LDFlagChangeset) => {\n      const flattened: LDFlagSet = getFlattenedFlagsFromChangeset(changes, targetFlags, this.getReactOptions());\n      if (Object.keys(flattened).length > 0) {\n        this.setState(({ flags }) => ({ flags: { ...flags, ...flattened } }));\n      }\n    });\n  };\n\n  initLDClient = async () => {\n    const { clientSideID, flags, options, user } = this.props;\n    const reactOptions = this.getReactOptions();\n    const { flags: fetchedFlags, ldClient } = await initLDClient(clientSideID, user, reactOptions, options, flags);\n    this.setState({ flags: fetchedFlags, ldClient });\n    this.subscribeToChanges(ldClient);\n  };\n\n  async componentDidMount() {\n    const { user, deferInitialization } = this.props;\n    if (deferInitialization && !user) {\n      return;\n    }\n\n    await this.initLDClient();\n  }\n\n  async componentDidUpdate(prevProps: ProviderConfig) {\n    const { user, deferInitialization } = this.props;\n    const userJustLoaded = !prevProps.user && user;\n    if (deferInitialization && userJustLoaded) {\n      await this.initLDClient();\n    }\n  }\n\n  render() {\n    return <Provider value={this.state}>{this.props.children}</Provider>;\n  }\n}\n\nexport default LDProvider;\n","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport { LDFlagSet, LDFlagChangeset } from 'launchdarkly-js-client-sdk';\nimport { defaultReactOptions, ProviderConfig } from './types';\nimport { Provider } from './context';\nimport initLDClient from './initLDClient';\nimport { camelCaseKeys, fetchFlags, getFlattenedFlagsFromChangeset } from './utils';\n\n/**\n * This is an async function which initializes LaunchDarkly's JS SDK (`launchdarkly-js-client-sdk`)\n * and awaits it so all flags and the ldClient are ready before the consumer app is rendered.\n *\n * The difference between `withLDProvider` and `asyncWithLDProvider` is that `withLDProvider` initializes\n * `launchdarkly-js-client-sdk` at componentDidMount. This means your flags and the ldClient are only available after\n * your app has mounted. This can result in a flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` initializes `launchdarkly-js-client-sdk` at the entry point of your app prior to render.\n * This means that your flags and the ldClient are ready at the beginning of your app. This ensures your app does not\n * flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` accepts a config object which is used to initialize `launchdarkly-js-client-sdk`.\n * It returns a provider which is a React FunctionComponent which:\n * - saves all flags and the ldClient instance in the context API\n * - subscribes to flag changes and propagate them through the context API\n *\n * @param config - The configuration used to initialize LaunchDarkly's JS SDK\n */\nexport default async function asyncWithLDProvider(config: ProviderConfig) {\n  const { clientSideID, user, flags: targetFlags, options, reactOptions: userReactOptions } = config;\n  const reactOptions = { ...defaultReactOptions, ...userReactOptions };\n  const { ldClient } = await initLDClient(clientSideID, user, reactOptions, options, targetFlags);\n\n  const LDProvider: FunctionComponent = ({ children }) => {\n    const [ldData, setLDData] = useState({\n      flags: fetchFlags(ldClient, reactOptions, targetFlags),\n      ldClient,\n    });\n\n    useEffect(() => {\n      if (options) {\n        const { bootstrap } = options;\n        if (bootstrap && bootstrap !== 'localStorage') {\n          const bootstrappedFlags = reactOptions.useCamelCaseFlagKeys ? camelCaseKeys(bootstrap) : bootstrap;\n          setLDData(prev => ({ ...prev, flags: bootstrappedFlags }));\n        }\n      }\n\n      ldClient.on('change', (changes: LDFlagChangeset) => {\n        const flattened: LDFlagSet = getFlattenedFlagsFromChangeset(changes, targetFlags, reactOptions);\n        if (Object.keys(flattened).length > 0) {\n          setLDData(prev => ({ ...prev, flags: { ...prev.flags, ...flattened } }));\n        }\n      });\n    }, []);\n\n    return <Provider value={ldData}>{children}</Provider>;\n  };\n\n  return LDProvider;\n}\n","import { useContext } from 'react';\nimport context from './context';\n\n/**\n * `useFlags` is a custom hook which returns all feature flags. It uses the `useContext` primitive\n * to access the LaunchDarkly context set up by `withLDProvider`. As such you will still need to\n * use the `withLDProvider` HOC at the root of your app to initialize the React SDK and populate the\n * context with `ldClient` and your flags.\n *\n * @return All the feature flags configured in your LaunchDarkly project\n */\nconst useFlags = () => {\n  const { flags } = useContext(context);\n\n  return flags;\n};\n\nexport default useFlags;\n","import { useContext } from 'react';\nimport context from './context';\n\n// tslint:disable:max-line-length\n/**\n * `useLDClient` is a custom hook which returns the underlying [LaunchDarkly JavaScript SDK client object](https://launchdarkly.github.io/js-client-sdk/interfaces/_launchdarkly_js_client_sdk_.ldclient.html).\n * Like the `useFlags` custom hook, `useLDClient` also uses the `useContext` primitive to access the LaunchDarkly\n * context set up by `withLDProvider`. You will still need to use the `withLDProvider` HOC\n * to initialise the react sdk to use this custom hook.\n *\n * @return The `launchdarkly-js-client-sdk` `LDClient` object\n */\n// tslint:enable:max-line-length\nconst useLDClient = () => {\n  const { ldClient } = useContext(context);\n\n  return ldClient;\n};\n\nexport default useLDClient;\n","import * as React from 'react';\nimport { Consumer, LDContext } from './context';\nimport { LDClient, LDFlagSet } from 'launchdarkly-js-client-sdk';\n\n/**\n * Controls the props the wrapped component receives from the `LDConsumer` HOC.\n */\nexport interface ConsumerOptions {\n  /**\n   * If true then the wrapped component only receives the `ldClient` instance\n   * and nothing else.\n   */\n  clientOnly: boolean;\n}\n\n/**\n * The possible props the wrapped component can receive from the `LDConsumer` HOC.\n */\nexport interface LDProps {\n  /**\n   * A map of feature flags from their keys to their values.\n   * Keys are camelCased using `lodash.camelcase`.\n   */\n  flags?: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`)\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient?: LDClient;\n}\n\n/**\n * withLDConsumer is a function which accepts an optional options object and returns a function\n * which accepts your React component. This function returns a HOC with flags\n * and the ldClient instance injected via props.\n *\n * @param options - If you need only the `ldClient` instance and not flags, then set `{ clientOnly: true }`\n * to only pass the ldClient prop to your component. Defaults to `{ clientOnly: false }`.\n * @return A HOC with flags and the `ldClient` instance injected via props\n */\nfunction withLDConsumer(options: ConsumerOptions = { clientOnly: false }) {\n  return function withLDConsumerHoc<P>(WrappedComponent: React.ComponentType<P & LDProps>) {\n    return (props: P) => (\n      <Consumer>\n        {({ flags, ldClient }: LDContext) => {\n          if (options.clientOnly) {\n            return <WrappedComponent ldClient={ldClient} {...props} />;\n          }\n\n          return <WrappedComponent flags={flags} ldClient={ldClient} {...props} />;\n        }}\n      </Consumer>\n    );\n  };\n}\n\nexport default withLDConsumer;\n","import * as React from 'react';\nimport { defaultReactOptions, ProviderConfig } from './types';\nimport LDProvider from './provider';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\n/**\n * `withLDProvider` is a function which accepts a config object which is used to\n * initialize `launchdarkly-js-client-sdk`.\n *\n * This HOC handles passing configuration to the `LDProvider`, which does the following:\n * - It initializes the ldClient instance by calling `launchdarkly-js-client-sdk` initialize on `componentDidMount`\n * - It saves all flags and the ldClient instance in the context API\n * - It subscribes to flag changes and propagate them through the context API\n *\n * The difference between `withLDProvider` and `asyncWithLDProvider` is that `withLDProvider` initializes\n * `launchdarkly-js-client-sdk` at `componentDidMount`. This means your flags and the ldClient are only available after\n * your app has mounted. This can result in a flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` initializes `launchdarkly-js-client-sdk` at the entry point of your app prior to render.\n * This means that your flags and the ldClient are ready at the beginning of your app. This ensures your app does not\n * flicker due to flag changes at startup time.\n *\n * @param config - The configuration used to initialize LaunchDarkly's JS SDK\n * @return A function which accepts your root React component and returns a HOC\n */\nexport function withLDProvider<T = {}>(\n  config: ProviderConfig,\n): (WrappedComponent: React.ComponentType<T>) => React.ComponentType<T> {\n  return function withLDProviderHoc(WrappedComponent: React.ComponentType<T>): React.ComponentType<T> {\n    const { reactOptions: userReactOptions } = config;\n    const reactOptions = { ...defaultReactOptions, ...userReactOptions };\n    const providerProps = { ...config, reactOptions };\n\n    class HoistedComponent extends React.Component<T> {\n      render() {\n        return (\n          <LDProvider {...providerProps}>\n            <WrappedComponent {...this.props} />\n          </LDProvider>\n        );\n      }\n    }\n\n    hoistNonReactStatics(HoistedComponent, WrappedComponent);\n\n    return HoistedComponent;\n  };\n}\n\nexport default withLDProvider;\n"],"names":["defaultReactOptions","useCamelCaseFlagKeys","context","createContext","flags","ldClient","undefined","Provider","Consumer","camelCaseKeys","rawFlags","rawFlag","indexOf","camelCase","getFlattenedFlagsFromChangeset","changes","targetFlags","reactOptions","flattened","key","current","fetchFlags","flag","variation","allFlags","initLDClient","clientSideID","user","options","anonymous","allOptions","wrapperName","wrapperVersion","ldClientInitialize","Promise","resolve","on","props","_super","_this","getReactOptions","Object","keys","length","setState","_a","this","_b","_c","fetchedFlags","subscribeToChanges","state","bootstrap","__extends","LDProvider","prevProps","deferInitialization","userJustLoaded","React","value","children","Component","config","userReactOptions","ldData","setLDData","useEffect","bootstrappedFlags_1","prev","clientOnly","WrappedComponent","providerProps","HoistedComponent","hoistNonReactStatics"],"mappings":"4iFA4BO,IAAMA,EAAsB,CAAEC,sBAAsB,GCHrDC,EAAUC,gBAAyB,CAAEC,MAAO,GAAIC,cAAUC,IAK9DC,aAIAC,aCvBWC,EAAgB,SAACC,GAC5B,IAAMN,EAAmB,GACzB,IAAK,IAAMO,KAAWD,EAES,IAAzBC,EAAQC,QAAQ,OAClBR,EAAMS,UAAUF,IAAYD,EAASC,IAIzC,OAAOP,GAaIU,EAAiC,SAC5CC,EACAC,EACAC,GAEA,IAAMC,EAAuB,GAC7B,IAAK,IAAMC,KAAOJ,EAAS,CACzB,IAAKC,QAAoCV,IAArBU,EAAYG,GAG9BD,EADgBD,EAAahB,qBAAuBY,UAAUM,GAAOA,GAChDJ,EAAQI,GAAKC,QAItC,OAAOF,GAYIG,EAAa,SACxBhB,EACAY,EACAD,gBADAC,KAGA,IAAIP,EAAsB,GAE1B,GAAIM,EACF,IAAK,IAAMM,KAAQN,EACjBN,EAASY,GAAQjB,EAASkB,UAAUD,EAAMN,EAAYM,SAGxDZ,EAAWL,EAASmB,WAGtB,OAAOP,EAAahB,qBAAuBQ,EAAcC,GAAYA,GAQvED,EAAcA,cAAgBA,MCjExBgB,EAAe,SACnBC,EACAC,EACAV,EACAW,EACAZ,uBAHAW,GAAiBE,WAAW,iBAC5BZ,2EAOA,OAHMa,KAAeC,YAAa,mBAAoBC,yBAA4BJ,GAC5EvB,EAAW4B,aAAmBP,EAAcC,EAAMG,MAEjD,IAAII,SAA0B,SAAAC,GACnC9B,EAAS+B,GAAG,SAAS,WACnB,IAAMhC,EAAQiB,EAAWhB,EAAUY,EAAcD,GACjDmB,EAAQ,CAAE/B,QAAOC,yCCHrB,WAAYgC,GAAZ,MACEC,YAAMD,SAsBRE,kBAAkB,WAAM,cAAMvC,GAAwBuC,EAAKF,MAAMpB,eAEjEsB,qBAAqB,SAAClC,GACZ,IAAAW,gBACRX,EAAS+B,GAAG,UAAU,SAACrB,GACrB,IAAMG,EAAuBJ,EAA+BC,EAASC,EAAauB,EAAKC,mBACnFC,OAAOC,KAAKxB,GAAWyB,OAAS,GAClCJ,EAAKK,UAAS,SAACC,OAAEzC,UAAY,OAAGA,aAAYA,GAAUc,WAK5DqB,eAAe,wHAG6B,OAFpCM,EAAyCC,KAAKT,MAA5CX,iBAActB,UAAOwB,YAASD,SAChCV,EAAe6B,KAAKN,qBACsBf,EAAaC,EAAcC,EAAMV,EAAcW,EAASxB,kBAAlG2C,EAAoCC,SAA3BC,UAAc5C,aAC7ByC,KAAKF,SAAS,CAAExC,MAAO6C,EAAc5C,aACrCyC,KAAKI,mBAAmB7C,eArChB,IAAAuB,YAOR,GALAW,EAAKY,MAAQ,CACX/C,MAAO,GACPC,cAAUC,GAGRsB,EAAS,CACH,IAAAwB,cACR,GAAIA,GAA2B,iBAAdA,EAA8B,CACrC,IACFhD,2CAA+BK,EAAc2C,GAAaA,EAChEb,EAAKY,MAAQ,CACX/C,QACAC,cAAUC,aA8CpB,OAlEyB+C,OA8CjBC,8BAAN,6GAEE,OADMT,EAAgCC,KAAKT,MAAnCV,iCACoBA,SAItBmB,KAAKrB,8BAAXsB,qBAGIO,+BAAN,SAAyBC,gHACjBV,EAAgCC,KAAKT,MAAnCV,SAAM6B,wBACRC,GAAkBF,EAAU5B,MAAQA,EACtC6B,GAAuBC,KACnBX,KAAKrB,6BAAXsB,4CAIJO,mBAAA,WACE,OAAOI,gBAACnD,GAASoD,MAAOb,KAAKK,OAAQL,KAAKT,MAAMuB,cAhE3BF,EAAMG,qECEmBC,iHAG3B,OAFbpC,EAAoFoC,eAAtEnC,EAAsEmC,OAAzD9C,EAAyD8C,QAA5ClC,EAA4CkC,UAArBC,EAAqBD,eACtF7C,SAAoBjB,GAAwB+D,MACvBtC,EAAaC,EAAcC,EAAMV,EAAcW,EAASZ,WA4BnF,OA5BQX,EAAawC,kBAEfS,EAAgC,SAACT,OAAEe,aACjCb,0CAACiB,OAAQC,OAsBf,OAjBAC,aAAU,WACR,GAAItC,EAAS,CACH,IAAAwB,cACR,GAAIA,GAA2B,iBAAdA,EAA8B,CAC7C,IAAMe,EAAoBlD,EAAahB,qBAAuBQ,EAAc2C,GAAaA,EACzFa,GAAU,SAAAG,GAAQ,cAAMA,IAAMhE,MAAO+D,QAIzC9D,EAAS+B,GAAG,UAAU,SAACrB,GACrB,IAAMG,EAAuBJ,EAA+BC,EAASC,EAAaC,GAC9EwB,OAAOC,KAAKxB,GAAWyB,OAAS,GAClCsB,GAAU,SAAAG,GAAQ,cAAMA,IAAMhE,aAAYgE,EAAKhE,OAAUc,aAG5D,IAEIwC,wBAACnD,GAASoD,MAAOK,GAASJ,OAG5BN,oDC9CQ,WAGf,kDCDkB,WAGlB,wDC0BF,SAAwB1B,GACtB,oBADsBA,GAA6ByC,YAAY,IACxD,SAA8BC,GACnC,OAAO,SAACjC,GAAa,OACnBqB,gBAAClD,QACE,SAACqC,OAAEzC,UAAOC,aACT,OAAIuB,EAAQyC,WACHX,gBAACY,KAAiBjE,SAAUA,GAAcgC,IAG5CqB,gBAACY,KAAiBlE,MAAOA,EAAOC,SAAUA,GAAcgC,0CCzBvEyB,GAEA,OAAO,SAA2BQ,GACxB,IAAAP,iBACF9C,SAAoBjB,GAAwB+D,GAC5CQ,SAAqBT,IAAQ7C,+BAEnC,4DAQA,OAR+BoC,OAC7BmB,mBAAA,WACE,OACEd,gBAACJ,OAAeiB,GACdb,gBAACY,OAAqBxB,KAAKT,aAJJqB,EAAMG,WAYrC,OAFAY,UAAqBD,EAAkBF,GAEhCE"}