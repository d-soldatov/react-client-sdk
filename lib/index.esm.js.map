{"version":3,"file":"index.esm.js","sources":["../src/types.ts","../src/context.ts","../src/utils.ts","../src/initLDClient.ts","../src/provider.tsx","../src/withLDProvider.tsx","../src/asyncWithLDProvider.tsx","../src/withLDConsumer.tsx","../src/useFlags.ts","../src/useLDClient.ts"],"sourcesContent":["import { LDClient, LDFlagSet, LDOptions, LDUser } from 'launchdarkly-js-client-sdk';\nimport * as React from 'react';\n\n/**\n * Initialization options for the LaunchDarkly React SDK. These are in addition to the options exposed\n * by [[LDOptions]] which are common to both the JavaScript and React SDKs.\n */\nexport interface LDReactOptions {\n  /**\n   * Whether the React SDK should transform flag keys into camel-cased format.\n   * Using camel-cased flag keys allow for easier use as prop values, however,\n   * these keys won't directly match the flag keys as known to LaunchDarkly.\n   * Consequently, flag key collisions may be possible and the Code References feature\n   * will not function properly.\n   *\n   * This is true by default, meaning that keys will automatically be converted to camel-case.\n   *\n   * For more information, see the React SDK Reference Guide on\n   * [flag keys](https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys).\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/react/react-web#flag-keys\n   */\n  useCamelCaseFlagKeys?: boolean;\n}\n\n/**\n * Contains default values for the `reactOptions` object.\n */\nexport const defaultReactOptions = { useCamelCaseFlagKeys: true };\n\n/**\n * Configuration object used to initialise LaunchDarkly's JS client.\n */\nexport interface ProviderConfig {\n  /**\n   * Your project and environment specific client side ID. You can find\n   * this in your LaunchDarkly portal under Account settings. This is\n   * the only mandatory property required to use the React SDK.\n   */\n  clientSideID: string;\n\n  /**\n   * A LaunchDarkly user object. If unspecified, a new user with a\n   * random key will be created and used. This user's key will remain constant across browser sessions.\n   *\n   * @see https://docs.launchdarkly.com/sdk/features/user-config#javascript\n   */\n  user?: LDUser;\n\n  /**\n   * If set to true, the ldClient will not be initialized until the user prop has been defined.\n   */\n  deferInitialization?: boolean;\n\n  /**\n   * LaunchDarkly initialization options. These options are common between LaunchDarkly's JavaScript and React SDKs.\n   *\n   * @see https://docs.launchdarkly.com/sdk/features/config#javascript\n   */\n  options?: LDOptions;\n\n  /**\n   * Additional initialization options specific to the React SDK.\n   *\n   * @see options\n   */\n  reactOptions?: LDReactOptions;\n\n  /**\n   * If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n   * Otherwise, all flags will be requested and listened to.\n   */\n  flags?: LDFlagSet;\n}\n\n/**\n * The return type of withLDProvider HOC. Exported for testing purposes only.\n *\n * @ignore\n */\nexport interface EnhancedComponent extends React.Component {\n  subscribeToChanges(ldClient: LDClient): void;\n  // tslint:disable-next-line:invalid-void\n  componentDidMount(): Promise<void>;\n  // tslint:disable-next-line:invalid-void\n  componentDidUpdate(prevProps: ProviderConfig): Promise<void>;\n}\n\n/**\n * Return type of `initLDClient`.\n */\nexport interface AllFlagsLDClient {\n  /**\n   * Contains all flags from LaunchDarkly.\n   */\n  flags: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`).\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient: LDClient;\n}\n","import { createContext } from 'react';\nimport { LDClient, LDFlagSet } from 'launchdarkly-js-client-sdk';\n\n/**\n * The LaunchDarkly context stored in the Provider state and passed to consumers.\n */\ninterface LDContext {\n  /**\n   * Contains all flags from LaunchDarkly. This object will always exist but will be empty {} initially\n   * until flags are fetched from the LaunchDarkly servers.\n   */\n  flags: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`).\n   * This will be be undefined initially until initialization is complete.\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient?: LDClient;\n}\n\n/**\n * @ignore\n */\nconst context = createContext<LDContext>({ flags: {}, ldClient: undefined });\nconst {\n  /**\n   * @ignore\n   */\n  Provider,\n  /**\n   * @ignore\n   */\n  Consumer,\n} = context;\n\nexport { Provider, Consumer, LDContext };\nexport default context;\n","import { LDClient, LDFlagChangeset, LDFlagSet } from 'launchdarkly-js-client-sdk';\nimport camelCase from 'lodash.camelcase';\nimport { defaultReactOptions, LDReactOptions } from './types';\n\n/**\n * Transforms a set of flags so that their keys are camelCased. This function ignores\n * flag keys which start with `$`.\n *\n * @param rawFlags A mapping of flag keys and their values\n * @return A transformed `LDFlagSet` with camelCased flag keys\n */\nexport const camelCaseKeys = (rawFlags: LDFlagSet) => {\n  const flags: LDFlagSet = {};\n  for (const rawFlag in rawFlags) {\n    // Exclude system keys\n    if (rawFlag.indexOf('$') !== 0) {\n      flags[camelCase(rawFlag)] = rawFlags[rawFlag]; // tslint:disable-line:no-unsafe-any\n    }\n  }\n\n  return flags;\n};\n\n/**\n * Gets the flags to pass to the provider from the changeset.\n *\n * @param changes the `LDFlagChangeset` from the ldClient onchange handler.\n * @param targetFlags if targetFlags are specified, changes to other flags are ignored and not returned in the\n * flattened `LDFlagSet`\n * @param reactOptions reactOptions.useCamelCaseFlagKeys determines whether to change the flag keys to camelCase\n * @return an `LDFlagSet` with the current flag values from the LDFlagChangeset filtered by `targetFlags`. The returned\n * object may be empty `{}` if none of the targetFlags were changed.\n */\nexport const getFlattenedFlagsFromChangeset = (\n  changes: LDFlagChangeset,\n  targetFlags: LDFlagSet | undefined,\n  reactOptions: LDReactOptions,\n): LDFlagSet => {\n  const flattened: LDFlagSet = {};\n  for (const key in changes) {\n    if (!targetFlags || targetFlags[key] !== undefined) {\n      // tslint:disable-next-line:no-unsafe-any\n      const flagKey = reactOptions.useCamelCaseFlagKeys ? camelCase(key) : key;\n      flattened[flagKey] = changes[key].current;\n    }\n  }\n\n  return flattened;\n};\n\n/**\n * Retrieves flag values.\n *\n * @param ldClient LaunchDarkly client\n * @param reactOptions Initialization options for the LaunchDarkly React SDK\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n *\n * @returns an `LDFlagSet` with the current flag values from LaunchDarkly filtered by `targetFlags`.\n */\nexport const fetchFlags = (\n  ldClient: LDClient,\n  reactOptions: LDReactOptions = defaultReactOptions,\n  targetFlags?: LDFlagSet,\n) => {\n  let rawFlags: LDFlagSet = {};\n\n  if (targetFlags) {\n    for (const flag in targetFlags) {\n      rawFlags[flag] = ldClient.variation(flag, targetFlags[flag]);\n    }\n  } else {\n    rawFlags = ldClient.allFlags();\n  }\n\n  return reactOptions.useCamelCaseFlagKeys ? camelCaseKeys(rawFlags) : rawFlags;\n};\n\n/**\n * @deprecated The `camelCaseKeys.camelCaseKeys` property will be removed in a future version,\n * please update your code to use the `camelCaseKeys` function directly.\n */\n// tslint:disable-next-line deprecation\ncamelCaseKeys.camelCaseKeys = camelCaseKeys;\n\nexport default { camelCaseKeys, getFlattenedFlagsFromChangeset, fetchFlags };\n","import { initialize as ldClientInitialize, LDFlagSet, LDOptions, LDUser } from 'launchdarkly-js-client-sdk';\nimport { AllFlagsLDClient, defaultReactOptions, LDReactOptions } from './types';\nimport { fetchFlags } from './utils';\nimport { version } from '../package.json';\n\n/**\n * Internal function to initialize the `LDClient`.\n *\n * @param clientSideID Your project and environment specific client side ID\n * @param user A LaunchDarkly user object\n * @param reactOptions Initialization options for the LaunchDarkly React SDK\n * @param options LaunchDarkly initialization options\n * @param targetFlags If specified, `launchdarkly-react-client-sdk` will only request and listen to these flags.\n *\n * @see `ProviderConfig` for more details about the parameters\n * @return An initialized client and flags\n */\nconst initLDClient = async (\n  clientSideID: string,\n  user: LDUser = { anonymous: true },\n  reactOptions: LDReactOptions = defaultReactOptions,\n  options?: LDOptions,\n  targetFlags?: LDFlagSet,\n): Promise<AllFlagsLDClient> => {\n  const allOptions = { wrapperName: 'react-client-sdk', wrapperVersion: version, ...options };\n  const ldClient = ldClientInitialize(clientSideID, user, allOptions);\n\n  return new Promise<AllFlagsLDClient>(resolve => {\n    ldClient.on('ready', () => {\n      const flags = fetchFlags(ldClient, reactOptions, targetFlags);\n      resolve({ flags, ldClient });\n    });\n  });\n};\n\nexport default initLDClient;\n","import * as React from 'react';\nimport { LDClient, LDFlagSet, LDFlagChangeset } from 'launchdarkly-js-client-sdk';\nimport { EnhancedComponent, ProviderConfig, defaultReactOptions } from './types';\nimport { Provider, LDContext as HocState } from './context';\nimport initLDClient from './initLDClient';\nimport { camelCaseKeys, getFlattenedFlagsFromChangeset } from './utils';\n\n/**\n * The `LDProvider` is a component which accepts a config object which is used to\n * initialize `launchdarkly-js-client-sdk`.\n *\n * This Provider does three things:\n * - It initializes the ldClient instance by calling `launchdarkly-js-client-sdk` initialize on `componentDidMount`\n * - It saves all flags and the ldClient instance in the context API\n * - It subscribes to flag changes and propagate them through the context API\n *\n * Because the `launchdarkly-js-client-sdk` in only initialized on `componentDidMount`, your flags and the\n * ldClient are only available after your app has mounted. This can result in a flicker due to flag changes at\n * startup time.\n *\n * This component can be used as a standalone provider. However, be mindful to only include the component once\n * within your application. This provider is used inside the `withLDProviderHOC` and can be used instead to initialize\n * the `launchdarkly-js-client-sdk`. For async initialization, check out the `asyncWithLDProvider` function\n */\nclass LDProvider extends React.Component<ProviderConfig, HocState> implements EnhancedComponent {\n  readonly state: Readonly<HocState>;\n\n  constructor(props: ProviderConfig) {\n    super(props);\n\n    const { options } = props;\n\n    this.state = {\n      flags: {},\n      ldClient: undefined,\n    };\n\n    if (options) {\n      const { bootstrap } = options;\n      if (bootstrap && bootstrap !== 'localStorage') {\n        const { useCamelCaseFlagKeys } = this.getReactOptions();\n        const flags = useCamelCaseFlagKeys ? camelCaseKeys(bootstrap) : bootstrap;\n        this.state = {\n          flags,\n          ldClient: undefined,\n        };\n      }\n    }\n  }\n\n  getReactOptions = () => ({ ...defaultReactOptions, ...this.props.reactOptions });\n\n  subscribeToChanges = (ldClient: LDClient) => {\n    const { flags: targetFlags } = this.props;\n    ldClient.on('change', (changes: LDFlagChangeset) => {\n      const flattened: LDFlagSet = getFlattenedFlagsFromChangeset(changes, targetFlags, this.getReactOptions());\n      if (Object.keys(flattened).length > 0) {\n        this.setState(({ flags }) => ({ flags: { ...flags, ...flattened } }));\n      }\n    });\n  };\n\n  initLDClient = async () => {\n    const { clientSideID, flags, options, user } = this.props;\n    const reactOptions = this.getReactOptions();\n    const { flags: fetchedFlags, ldClient } = await initLDClient(clientSideID, user, reactOptions, options, flags);\n    this.setState({ flags: fetchedFlags, ldClient });\n    this.subscribeToChanges(ldClient);\n  };\n\n  async componentDidMount() {\n    const { user, deferInitialization } = this.props;\n    if (deferInitialization && !user) {\n      return;\n    }\n\n    await this.initLDClient();\n  }\n\n  async componentDidUpdate(prevProps: ProviderConfig) {\n    const { user, deferInitialization } = this.props;\n    const userJustLoaded = !prevProps.user && user;\n    if (deferInitialization && userJustLoaded) {\n      await this.initLDClient();\n    }\n  }\n\n  render() {\n    return <Provider value={this.state}>{this.props.children}</Provider>;\n  }\n}\n\nexport default LDProvider;\n","import * as React from 'react';\nimport { defaultReactOptions, ProviderConfig } from './types';\nimport LDProvider from './provider';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\n/**\n * `withLDProvider` is a function which accepts a config object which is used to\n * initialize `launchdarkly-js-client-sdk`.\n *\n * This HOC handles passing configuration to the `LDProvider`, which does the following:\n * - It initializes the ldClient instance by calling `launchdarkly-js-client-sdk` initialize on `componentDidMount`\n * - It saves all flags and the ldClient instance in the context API\n * - It subscribes to flag changes and propagate them through the context API\n *\n * The difference between `withLDProvider` and `asyncWithLDProvider` is that `withLDProvider` initializes\n * `launchdarkly-js-client-sdk` at `componentDidMount`. This means your flags and the ldClient are only available after\n * your app has mounted. This can result in a flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` initializes `launchdarkly-js-client-sdk` at the entry point of your app prior to render.\n * This means that your flags and the ldClient are ready at the beginning of your app. This ensures your app does not\n * flicker due to flag changes at startup time.\n *\n * @param config - The configuration used to initialize LaunchDarkly's JS SDK\n * @return A function which accepts your root React component and returns a HOC\n */\nexport function withLDProvider<T = {}>(\n  config: ProviderConfig,\n): (WrappedComponent: React.ComponentType<T>) => React.ComponentType<T> {\n  return function withLDProviderHoc(WrappedComponent: React.ComponentType<T>): React.ComponentType<T> {\n    const { reactOptions: userReactOptions } = config;\n    const reactOptions = { ...defaultReactOptions, ...userReactOptions };\n    const providerProps = { ...config, reactOptions };\n\n    class HoistedComponent extends React.Component<T> {\n      render() {\n        return (\n          <LDProvider {...providerProps}>\n            <WrappedComponent {...this.props} />\n          </LDProvider>\n        );\n      }\n    }\n\n    hoistNonReactStatics(HoistedComponent, WrappedComponent);\n\n    return HoistedComponent;\n  };\n}\n\nexport default withLDProvider;\n","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport { LDFlagSet, LDFlagChangeset } from 'launchdarkly-js-client-sdk';\nimport { defaultReactOptions, ProviderConfig } from './types';\nimport { Provider } from './context';\nimport initLDClient from './initLDClient';\nimport { camelCaseKeys, fetchFlags, getFlattenedFlagsFromChangeset } from './utils';\n\n/**\n * This is an async function which initializes LaunchDarkly's JS SDK (`launchdarkly-js-client-sdk`)\n * and awaits it so all flags and the ldClient are ready before the consumer app is rendered.\n *\n * The difference between `withLDProvider` and `asyncWithLDProvider` is that `withLDProvider` initializes\n * `launchdarkly-js-client-sdk` at componentDidMount. This means your flags and the ldClient are only available after\n * your app has mounted. This can result in a flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` initializes `launchdarkly-js-client-sdk` at the entry point of your app prior to render.\n * This means that your flags and the ldClient are ready at the beginning of your app. This ensures your app does not\n * flicker due to flag changes at startup time.\n *\n * `asyncWithLDProvider` accepts a config object which is used to initialize `launchdarkly-js-client-sdk`.\n * It returns a provider which is a React FunctionComponent which:\n * - saves all flags and the ldClient instance in the context API\n * - subscribes to flag changes and propagate them through the context API\n *\n * @param config - The configuration used to initialize LaunchDarkly's JS SDK\n */\nexport default async function asyncWithLDProvider(config: ProviderConfig) {\n  const { clientSideID, user, flags: targetFlags, options, reactOptions: userReactOptions } = config;\n  const reactOptions = { ...defaultReactOptions, ...userReactOptions };\n  const { ldClient } = await initLDClient(clientSideID, user, reactOptions, options, targetFlags);\n\n  const LDProvider: FunctionComponent = ({ children }) => {\n    const [ldData, setLDData] = useState({\n      flags: fetchFlags(ldClient, reactOptions, targetFlags),\n      ldClient,\n    });\n\n    useEffect(() => {\n      if (options) {\n        const { bootstrap } = options;\n        if (bootstrap && bootstrap !== 'localStorage') {\n          const bootstrappedFlags = reactOptions.useCamelCaseFlagKeys ? camelCaseKeys(bootstrap) : bootstrap;\n          setLDData(prev => ({ ...prev, flags: bootstrappedFlags }));\n        }\n      }\n\n      ldClient.on('change', (changes: LDFlagChangeset) => {\n        const flattened: LDFlagSet = getFlattenedFlagsFromChangeset(changes, targetFlags, reactOptions);\n        if (Object.keys(flattened).length > 0) {\n          setLDData(prev => ({ ...prev, flags: { ...prev.flags, ...flattened } }));\n        }\n      });\n    }, []);\n\n    return <Provider value={ldData}>{children}</Provider>;\n  };\n\n  return LDProvider;\n}\n","import * as React from 'react';\nimport { Consumer, LDContext } from './context';\nimport { LDClient, LDFlagSet } from 'launchdarkly-js-client-sdk';\n\n/**\n * Controls the props the wrapped component receives from the `LDConsumer` HOC.\n */\nexport interface ConsumerOptions {\n  /**\n   * If true then the wrapped component only receives the `ldClient` instance\n   * and nothing else.\n   */\n  clientOnly: boolean;\n}\n\n/**\n * The possible props the wrapped component can receive from the `LDConsumer` HOC.\n */\nexport interface LDProps {\n  /**\n   * A map of feature flags from their keys to their values.\n   * Keys are camelCased using `lodash.camelcase`.\n   */\n  flags?: LDFlagSet;\n\n  /**\n   * An instance of `LDClient` from the LaunchDarkly JS SDK (`launchdarkly-js-client-sdk`)\n   *\n   * @see https://docs.launchdarkly.com/sdk/client-side/javascript\n   */\n  ldClient?: LDClient;\n}\n\n/**\n * withLDConsumer is a function which accepts an optional options object and returns a function\n * which accepts your React component. This function returns a HOC with flags\n * and the ldClient instance injected via props.\n *\n * @param options - If you need only the `ldClient` instance and not flags, then set `{ clientOnly: true }`\n * to only pass the ldClient prop to your component. Defaults to `{ clientOnly: false }`.\n * @return A HOC with flags and the `ldClient` instance injected via props\n */\nfunction withLDConsumer(options: ConsumerOptions = { clientOnly: false }) {\n  return function withLDConsumerHoc<P>(WrappedComponent: React.ComponentType<P & LDProps>) {\n    return (props: P) => (\n      <Consumer>\n        {({ flags, ldClient }: LDContext) => {\n          if (options.clientOnly) {\n            return <WrappedComponent ldClient={ldClient} {...props} />;\n          }\n\n          return <WrappedComponent flags={flags} ldClient={ldClient} {...props} />;\n        }}\n      </Consumer>\n    );\n  };\n}\n\nexport default withLDConsumer;\n","import { useContext } from 'react';\nimport context from './context';\n\n/**\n * `useFlags` is a custom hook which returns all feature flags. It uses the `useContext` primitive\n * to access the LaunchDarkly context set up by `withLDProvider`. As such you will still need to\n * use the `withLDProvider` HOC at the root of your app to initialize the React SDK and populate the\n * context with `ldClient` and your flags.\n *\n * @return All the feature flags configured in your LaunchDarkly project\n */\nconst useFlags = () => {\n  const { flags } = useContext(context);\n\n  return flags;\n};\n\nexport default useFlags;\n","import { useContext } from 'react';\nimport context from './context';\n\n// tslint:disable:max-line-length\n/**\n * `useLDClient` is a custom hook which returns the underlying [LaunchDarkly JavaScript SDK client object](https://launchdarkly.github.io/js-client-sdk/interfaces/_launchdarkly_js_client_sdk_.ldclient.html).\n * Like the `useFlags` custom hook, `useLDClient` also uses the `useContext` primitive to access the LaunchDarkly\n * context set up by `withLDProvider`. You will still need to use the `withLDProvider` HOC\n * to initialise the react sdk to use this custom hook.\n *\n * @return The `launchdarkly-js-client-sdk` `LDClient` object\n */\n// tslint:enable:max-line-length\nconst useLDClient = () => {\n  const { ldClient } = useContext(context);\n\n  return ldClient;\n};\n\nexport default useLDClient;\n"],"names":["ldClientInitialize","React"],"mappings":"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"}